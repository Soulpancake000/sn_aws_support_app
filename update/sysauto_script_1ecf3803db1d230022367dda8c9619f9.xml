<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition/>
        <conditional>false</conditional>
        <name>CreateAWSSupportChoices</name>
        <run_as display_value="System Administrator">6816f79cc0a8016401c5a33be04be441</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period/>
        <run_start>2018-10-26 10:15:06</run_start>
        <run_time>1970-01-01 08:00:00</run_time>
        <run_type>on_demand</run_type>
        <script><![CDATA[gs.include("AwsSupportApi");

function insertServiceChoices(service) {
    gs.info("SERVICE " + JSON.stringify(service));
    var service_choice = insertChoice(service, "x_195647_aws__service_code");
    for (var c in service["categories"]) {
        var category_choice = insertChoice(service["categories"][c], "x_195647_aws__service_category", service["code"]);
    }
}

function insertChoice(object, element, dependent_value) {
    var choice = new GlideRecord("sys_choice");
    choice.addQuery("element", element);
    if (dependent_value) {
        choice.addQuery("dependent_value", dependent_value);
    }
    choice.addQuery("value", object["code"]);
    choice.query();
    if (choice.hasNext()) {
        choice.next();
    } else {
        choice.initialize();
    }
    choice.inactive= false;
    choice.value   = object["code"];
    choice.label   = object["name"];
    choice.element = element;
    choice.name   = 'incident';
    if (dependent_value) {
        choice.dependent_value = dependent_value;
    }
    choice.update();
    gs.info('inserted choice ' + choice.sys_id + ' ' + choice.value + " " + choice.dependent_value);
}

(function() {
    var aws_account = new GlideRecord("x_195647_aws__accounts");
    aws_account.addQuery("active", "true");
    aws_account.query();
    if (!aws_account.hasNext()) { 
        gs.error("Error importing AWS Support Codes, one AWS account must be configured & active");
        return false;
    }

    aws_account.next();
    var creds = {
        accessKeyId: String(aws_account.aws_api_key),
        secretAccessKey: aws_account.aws_secret_key.getDecryptedValue()
    };

    AWSApi = new AwsSupportApi(creds);
    var services = AWSApi.describeServices();
    //gs.info("Services: " + JSON.stringify(services));

    /*{
        "code": "comprehend", 
        "name": "Comprehend", 
        "categories": [
            {
                "code": "other", 
                "name": "Other"
            }, 
            {
                "code": "feature-request", 
                "name": "Feature Request"
            }, 
            {
                "code": "api", 
                "name": "API"
            }, 
            {
                "code": "general-guidance", 
                "name": "General Guidance"
            }
        ]
    },*/ 

    for (var s in services) {
        insertServiceChoices(services[s]);
        gs.info("Added Service: " + services[s].name);
    }
})();]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-10-26 10:16:10</sys_created_on>
        <sys_id>1ecf3803db1d230022367dda8c9619f9</sys_id>
        <sys_mod_count>18</sys_mod_count>
        <sys_name>CreateAWSSupportChoices</sys_name>
        <sys_package display_value="AwsSupport" source="x_195647_aws_">23f1ab6bdb41230022367dda8c961976</sys_package>
        <sys_policy/>
        <sys_scope display_value="AwsSupport">23f1ab6bdb41230022367dda8c961976</sys_scope>
        <sys_update_name>sysauto_script_1ecf3803db1d230022367dda8c9619f9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-11-06 23:44:06</sys_updated_on>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>

<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step">
    <sys_atf_step action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>Run Server Side Validation Script</description>
        <display_name>Run Server Side Script</display_name>
        <inputs/>
        <order>1</order>
        <step_config display_value="Run Server Side Script">41de4a935332120028bc29cac2dc349a</step_config>
        <sys_class_name>sys_atf_step</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-10-31 22:27:27</sys_created_on>
        <sys_id>0b5715b4db69630022367dda8c961960</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>Run Server Side Script</sys_name>
        <sys_package display_value="AwsSupport" source="x_195647_aws_">23f1ab6bdb41230022367dda8c961976</sys_package>
        <sys_policy/>
        <sys_scope display_value="AwsSupport">23f1ab6bdb41230022367dda8c961976</sys_scope>
        <sys_update_name>sys_atf_step_0b5715b4db69630022367dda8c961960</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-10-31 22:38:10</sys_updated_on>
        <table/>
        <test display_value="Add Case Communications">7e57153cdb29630022367dda8c96195a</test>
        <timeout/>
    </sys_atf_step>
    <sys_variable_value action="delete_multiple" query="document_key=0b5715b4db69630022367dda8c961960"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>0b5715b4db69630022367dda8c961960</document_key>
        <order>100</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-10-31 22:27:27</sys_created_on>
        <sys_id>875715b4db69630022367dda8c961961</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-10-31 22:27:27</sys_updated_on>
        <value>// You can use this step to execute a variety of server-side javascript tests including&#13;
// jasmine tests and custom assertions&#13;
//&#13;
//&#13;
// Pass or fail a step: Override the step outcome to pass or fail. This is ignored &#13;
//                      by jasmine tests&#13;
//&#13;
//  - Return true from the main function body to pass the step&#13;
//  - Return false from the main function body to fail the step&#13;
//&#13;
//&#13;
// outputs:       Pre-defined Step config Output variables to set on this step during &#13;
//                execution that are available to later steps&#13;
//&#13;
// steps(SYS_ID): A function to retrieve Output variable data from a step that executed&#13;
//                earlier in the test. The desired step's sys_id is required&#13;
//&#13;
//  Example:&#13;
//&#13;
//      // Test step 1 - add data&#13;
//      var gr = new GlideRecord('sc_task');&#13;
//      // this sample step's Step config has Output variables named table and record_id&#13;
//      outputs.table = 'sc_task';&#13;
//      outputs.record_id = gr.insert();&#13;
//&#13;
//      // Test step 2 - access added data and validate&#13;
//      // check that the record exists (or that business logic changed it)&#13;
//      var gr = new GlideRecord("sc_task");&#13;
//      gr.get(steps(PREVIOUS_STEP_SYS_ID).record_id);&#13;
//      assertEqual({name: "task gr exists", shouldbe: true, value: gr.isValidRecord()});&#13;
//&#13;
//&#13;
// stepResult.setOutputMessage: Log a message to step results after step executes.&#13;
//                              Can only be called once or will overwrite previous &#13;
//                              message&#13;
//&#13;
//  Example:&#13;
//&#13;
//      var gr = new GlideRecord('sc_task');&#13;
//      gr.setValue('short_description', 'verify task can be inserted');&#13;
//      var grSysId = gr.insert();&#13;
//      var justCreatedGR = new GlideRecord('sc_task');&#13;
//      if (justCreatedGR.get(grSysId)) {&#13;
//            stepResult.setOutputMessage("Successfully inserted task record");&#13;
//            return true; // pass the step&#13;
//      } else { &#13;
//            stepResult.setOutputMessage("Failed to insert task record");&#13;
//            return false; // fail the step&#13;
//      }&#13;
//&#13;
//&#13;
// Note: describe is only supported in Global scope.&#13;
// Use 'describe' to create a suite of test scripts and 'it' to define test expectations&#13;
//&#13;
//  Example jasmine test:&#13;
//&#13;
//      describe('my suite of script tests', function() {&#13;
//            it('should meet expectations', function() {&#13;
//                  expect(true).not.toBe(false);&#13;
//            });&#13;
//      });&#13;
//      // make sure to uncomment jasmine.getEnv().execute(); outside the function body&#13;
//&#13;
//&#13;
// assertEqual: A function used to compare that assertion.shouldbe == assertion.value;&#13;
//              in case of failure it throws an Error and logs that the assertion by&#13;
//              name has failed&#13;
//&#13;
//  Example:&#13;
//&#13;
//      var testAssertion = {&#13;
//            name: "my test assertion",&#13;
//            shouldbe: "expected value"&#13;
//            value: "actual value",&#13;
//      };&#13;
//      assertEqual(testAssertion); // throws Error, logs message to test step output&#13;
//&#13;
function sleep(ms) {&#13;
    var unixtime_ms = new Date().getTime();&#13;
    while(new Date().getTime() &lt; unixtime_ms + ms) {}&#13;
}&#13;
&#13;
(function(outputs, steps, stepResult, assertEqual) {&#13;
    time = new GlideDate();&#13;
    time.add(-10000);&#13;
    var incident = new GlideRecord('incident');&#13;
    incident.addQuery("short_description", "Integration Test please ignore: Create Case");&#13;
    incident.addQuery("sys_created_on", '&gt;', time);&#13;
    incident.query();&#13;
    if (incident.hasNext()) {&#13;
        sleep(20000);&#13;
        incident.next();&#13;
        gs.info("INCIDNET CREATED TEST CASE: " + incident.x_195647_aws__service_category + " " + incident.x_195647_aws__service_code + " " + incident.number);&#13;
        aws_support_case = new GlideRecord('x_195647_aws__support_cases');&#13;
        aws_support_case.addQuery('incident', incident.sys_id);&#13;
        aws_support_case.query();&#13;
        if (aws_support_case.hasNext()) {&#13;
            aws_support_case.next();&#13;
            outputs.table = 'x_195647_aws__support_cases';&#13;
            outputs.record_id = aws_support_case.sys_id;&#13;
            if (aws_support_case.case_id == "") { &#13;
                stepResult.setOutputMessage("Failed to store case id in reference record.");&#13;
                return false; // pass the step&#13;
            }&#13;
            if (aws_support_case.status == "") { &#13;
                stepResult.setOutputMessage("Failed to store case status id in reference record.");&#13;
                return false; // pass the step&#13;
            }&#13;
            stepResult.setOutputMessage("Successfully inserted AWS Support Case reference record");&#13;
            return true; // pass the step&#13;
        } else {&#13;
            stepResult.setOutputMessage("Failed to insert AWS Support Case reference record");&#13;
            return false; // fail the step&#13;
        }&#13;
&#13;
     } else {&#13;
        stepResult.setOutputMessage("Failed to insert incident record");&#13;
        return false; // fail the step&#13;
     }&#13;
})(outputs, steps, stepResult, assertEqual);&#13;
&#13;
// uncomment the next line to execute this script as a jasmine test&#13;
//jasmine.getEnv().execute();</value>
        <variable display_value="">989d9e235324220002c6435723dc3484</variable>
    </sys_variable_value>
</record_update>
